import java.util.Scanner;

public class MainFunction {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Inputs for NormalEmployee
        System.out.print("Enter Name: ");
        String name = scanner.nextLine();
        System.out.print("Enter Employee ID: ");
        int employeeId = scanner.nextInt();
        System.out.print("Enter Designation: ");
        scanner.nextLine();
        String designation = scanner.nextLine();
        System.out.print("Enter Department: ");
        String dept = scanner.nextLine();
        System.out.print("Enter Date of Joining (dd/mm/yyyy): ");
        String doj = scanner.nextLine();
        System.out.print("Enter UAN: ");
        long uan = scanner.nextLong();
        System.out.print("Enter PF Number: ");
        int pfNo = scanner.nextInt();
        System.out.print("Enter Bank Name: ");
        scanner.nextLine();
        String bankName = scanner.nextLine();
        System.out.print("Enter Account Number: ");
        long accountNo = scanner.nextLong();

        NormalEmployee normalEmployee = new NormalEmployee();
        normalEmployee.setName(name);
        normalEmployee.setEmployeeId(employeeId);
        normalEmployee.setDesignation(designation);
        normalEmployee.setDept(dept);
        normalEmployee.setDOJ(doj);
        normalEmployee.setUAN(uan);
        normalEmployee.setPFNo(pfNo);
        normalEmployee.setBankName(bankName);
        normalEmployee.setAccountNo(accountNo);

        System.out.print("Enter Gross Wage: ");
        double grossWage = scanner.nextDouble();
        normalEmployee.setGrossWage(grossWage);
        System.out.print("Enter Total Working Days: ");
        int totalWorkingDays = scanner.nextInt();
        normalEmployee.setTotalWorkingDays(totalWorkingDays);
        System.out.print("Enter Loss of Pay Days: ");
        int lop = scanner.nextInt();
        normalEmployee.setLop(lop);
        System.out.print("Enter Bonus (0 for Normal Employee): ");
        double bonus = scanner.nextDouble();

        BonusEmployee bonusEmployee = new BonusEmployee();
        bonusEmployee.setName(name);
        bonusEmployee.setEmployeeId(employeeId);
        bonusEmployee.setDesignation(designation);
        bonusEmployee.setDept(dept);
        bonusEmployee.setDOJ(doj);
        bonusEmployee.setUAN(uan);
        bonusEmployee.setPFNo(pfNo);
        bonusEmployee.setBankName(bankName);
        bonusEmployee.setAccountNo(accountNo);
        bonusEmployee.setGrossWage(grossWage);
        bonusEmployee.setTotalWorkingDays(totalWorkingDays);
        bonusEmployee.setLop(lop);
        bonusEmployee.setBonus(bonus);

        double netSalary = 0;

        if (bonus == 0) {
            normalEmployee.theMonthly();
            netSalary = normalEmployee.getNet_salary();
            System.out.println("\n*************************Normal Employee********************");
            printPaySlip(normalEmployee, netSalary);
        } else {
            bonusEmployee.theMonthly();
            netSalary = bonusEmployee.getNet_salary();
            System.out.println("\n*************************Bonus Employee********************");
            printPaySlip(bonusEmployee, netSalary);
        }

        scanner.nextLine();
        scanner.nextLine();
        scanner.close();
    }

    private static void printPaySlip(Employee employee1, double netSalary) {
        // Print pay slip for employee
        System.out.println("Pay Slip for Employee: " + employee1.getName());
        System.out.println("Employee ID: " + employee1.getEmployeeId());
        System.out.println("Designation: " + employee1.getDesignation());
        System.out.println("Department: " + employee1.getDept());
        System.out.println("Date of Joining: " + employee1.getDOJ());
        System.out.println("UAN: " + employee1.getUAN());
        System.out.println("PF Number: " + employee1.getPFNo());
        System.out.println("ESI Number: " + employee1.getESINo());
        System.out.println();
        System.out.println("Bank Name: " + employee1.getBankName());
        System.out.println("Account Number: " + employee1.getAccountNo());
        System.out.println("Gross Wage: " + employee1.getGrossWage());
        System.out.println("Total Working Days: " + employee1.getTotalWorkingDays());
        System.out.println("Loss of Pay Days: " + employee1.getLop());
        System.out.println();
        System.out.println("Earnings");
        System.out.println("Basic Wage: " + employee1.getBasicWage());
        System.out.println("HRA: " + employee1.getHra());
        System.out.println("Conveyance Allowance: " + employee1.getConveyanceAllowance());
        System.out.println("Medical Allowance: " + employee1.getMedicalAllowance());
        System.out.println("Other Allowance: " + employee1.getOtherAllowance());
        System.out.println("Total Earnings: " + employee1.getTotalEarnings());
        System.out.println();
        System.out.println("Deductions");
        System.out.println("EPF: " + employee1.getEPF());
        System.out.println("Health Insurance: " + employee1.getHealthInsuranceAmt());
        System.out.println("Professional Tax: " + employee1.getPT());
        System.out.println("Loan Recovery: " + employee1.getLoanRecovery());
        System.out.println("Total Deductions: " + employee1.getTotalDeductions());
        System.out.println();
        System.out.println("Net_Salary");
        System.out.println("Net Salary: " + netSalary);

        if (employee1 instanceof NormalEmployee) {
            System.out.println("This is a Normal Employee.");
        } else if (employee1 instanceof BonusEmployee) {
            System.out.println("This is a Bonus Employee.");
        }

        System.out.println();
    }
}

import java.util.Scanner;

public abstract class Employee {
    private String name, designation, dept, bankName, DOJ;
    private int employeeId, totalWorkingDays, lop, leavesTaken;
    private long accountNo, UAN, PFNo, ESINo;
    private double grossWage, basicWage, hra, conveyanceAllowance, medicalAllowance, otherAllowance,
            EPF, healthInsuranceAmt, PT, loanRecovery, totalDeductions, net_salary, totalEarnings,
            bonus, bonus_salary;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDesignation() {
        return designation;
    }

    public void setDesignation(String designation) {
        this.designation = designation;
    }

    public String getDept() {
        return dept;
    }

    public void setDept(String dept) {
        this.dept = dept;
    }

    public String getBankName() {
        return bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    public String getDOJ() {
        return DOJ;
    }

    public void setDOJ(String dOJ) {
        DOJ = dOJ;
    }

    public int getEmployeeId() {
        return employeeId;
    }

    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public int getTotalWorkingDays() {
        return totalWorkingDays;
    }

    public void setTotalWorkingDays(int totalWorkingDays) {
        this.totalWorkingDays = totalWorkingDays;
    }

    public int getLop() {
        return lop;
    }

    public void setLop(int lop) {
        this.lop = lop;
    }

    public int getLeavesTaken() {
        return leavesTaken;
    }

    public void setLeavesTaken(int leavesTaken) {
        this.leavesTaken = leavesTaken;
    }

    public long getAccountNo() {
        return accountNo;
    }

    public void setAccountNo(long accountNo) {
        this.accountNo = accountNo;
    }

    public long getUAN() {
        return UAN;
    }

    public void setUAN(long uAN) {
        UAN = uAN;
    }

    public long getPFNo() {
        return PFNo;
    }

    public void setPFNo(long pFNo) {
        PFNo = pFNo;
    }

    public long getESINo() {
        return ESINo;
    }

    public void setESINo(long eSINo) {
        ESINo = eSINo;
    }

    public double getGrossWage() {
        return grossWage;
    }

    public void setGrossWage(double grossWage) {
        this.grossWage = grossWage;
    }

    public double getBasicWage() {
        return basicWage;
    }

    public void setBasicWage(double basicWage) {
        this.basicWage = basicWage;
    }

    public double getHra() {
        return hra;
    }

    public void setHra(double hra) {
        this.hra = hra;
    }

    public double getConveyanceAllowance() {
        return conveyanceAllowance;
    }

    public void setConveyanceAllowance(double conveyanceAllowance) {
        this.conveyanceAllowance = conveyanceAllowance;
    }

    public double getMedicalAllowance() {
        return medicalAllowance;
    }

    public void setMedicalAllowance(double medicalAllowance) {
        this.medicalAllowance = medicalAllowance;
    }

    public double getOtherAllowance() {
        return otherAllowance;
    }

    public void setOtherAllowance(double otherAllowance) {
        this.otherAllowance = otherAllowance;
    }

    public double getEPF() {
        return EPF;
    }

    public void setEPF(double ePF) {
        EPF = ePF;
    }

    public double getHealthInsuranceAmt() {
        return healthInsuranceAmt;
    }

    public void setHealthInsuranceAmt(double healthInsuranceAmt) {
        this.healthInsuranceAmt = healthInsuranceAmt;
    }

    public double getPT() {
        return PT;
    }

    public void setPT(double pT) {
        PT = pT;
    }

    public double getLoanRecovery() {
        return loanRecovery;
    }

    public void setLoanRecovery(double loanRecovery) {
        this.loanRecovery = loanRecovery;
    }

    public double getTotalDeductions() {
        return totalDeductions;
    }

    public void setTotalDeductions(double totalDeductions) {
        this.totalDeductions = totalDeductions;
    }

    public double getNet_salary() {
        return net_salary;
    }

    public void setNet_salary(double net_salary) {
        this.net_salary = net_salary;
    }

    public double getTotalEarnings() {
        return totalEarnings;
    }

    public void setTotalEarnings(double totalEarnings) {
        this.totalEarnings = totalEarnings;
    }

    public abstract double theMonthly();

    public double getBonus() {
        return bonus;
    }

    public void setBonus(double bonus) {
        this.bonus = bonus;
    }

    public double getBonus_salary() {
        return bonus_salary;
    }

    public void setBonus_salary(double bonus_salary) {
        this.bonus_salary = bonus_salary;
    }
}

public class NormalEmployee extends Employee {
    @Override
    public double theMonthly() {
        // Calculate basic wage
        setBasicWage(((getGrossWage() / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop())) * 0.45);
        // Calculate HRA
        setHra(getBasicWage() * 0.4);
        // Calculate conveyance allowance
        setConveyanceAllowance((1600 / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop()));
        // Calculate medical allowance
        setMedicalAllowance((1250 / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop()));
        // Calculate other allowance
        setOtherAllowance(getGrossWage() - (getBasicWage() + getHra() + getConveyanceAllowance() +
                getMedicalAllowance()));
        // Calculate total earnings
        setTotalEarnings(getBasicWage() + getHra() + getConveyanceAllowance() + getMedicalAllowance() +
                getOtherAllowance());
        // Calculate EPF
        if (getBasicWage() >= 15000) {
            setEPF(15000 * 0.12);
        } else {
            setEPF(getBasicWage() * 0.15);
        }
        // Calculate health insurance
        if (getGrossWage() <= 21000) {
            setHealthInsuranceAmt(getTotalEarnings() * 0.0075);
        } else {
            setHealthInsuranceAmt(0);
        }
        // Calculate PT
        setPT(0);
        // Calculate loan recovery
        setLoanRecovery(0);
        // Calculate total deductions
        setTotalDeductions(getEPF() + getHealthInsuranceAmt() + getPT() + getLoanRecovery());
        // Calculate net salary
        setNet_salary(getTotalEarnings() - getTotalDeductions());
        return getNet_salary();
    }
}

public class BonusEmployee extends Employee {
    @Override
    public double theMonthly() {
        // Calculate basic wage
        setBasicWage(((getGrossWage() / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop())) * 0.45);
        // Calculate HRA
        setHra(getBasicWage() * 0.4);
        // Calculate conveyance allowance
        setConveyanceAllowance((1600 / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop()));
        // Calculate medical allowance
        setMedicalAllowance((1250 / getTotalWorkingDays()) * (getTotalWorkingDays() - getLop()));
        // Calculate other allowance
        setOtherAllowance(getGrossWage() - (getBasicWage() + getHra() + getConveyanceAllowance() +
                getMedicalAllowance()));
        // Calculate total earnings
        setTotalEarnings(getBasicWage() + getHra() + getConveyanceAllowance() + getMedicalAllowance() +
                getOtherAllowance());
        // Calculate EPF
        if (getBasicWage() >= 15000) {
            setEPF(15000 * 0.12);
        } else {
            setEPF(getBasicWage() * 0.15);
        }
        // Calculate health insurance
        if (getGrossWage() <= 21000) {
            setHealthInsuranceAmt(getTotalEarnings() * 0.0075);
        } else {
            setHealthInsuranceAmt(0);
        }
        // Calculate PT
        setPT(0);
        // Calculate loan recovery
        setLoanRecovery(0);
        // Calculate total deductions
        setTotalDeductions(getEPF() + getHealthInsuranceAmt() + getPT() + getLoanRecovery());
        // Calculate net salary without bonus
        double netSalaryWithoutBonus = getTotalEarnings() - getTotalDeductions();
        // Calculate net salary with bonus
        setNet_salary(netSalaryWithoutBonus + getBonus());
        return getNet_salary();
    }
}
